import { OpenAI } from 'openai';
import { getPromptForStyle } from './promptService';
import { blobToBase64 } from '@/lib/base64';
import { uploadFromUrlToTmp } from '@/lib/uploadFromUrlToTmp';
import { maleStyles, femaleStyles } from '@/lib/avatarStyles';

const ai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
const LIMITLESS_CREST_URL = "https://pub-0539ca942f4a457a83573a5585904cba.r2.dev/styleref_limitless.png";

async function imageToDataUrl(url: string): Promise<string> {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch image from URL: ${url}`);
    }
    const blob = await response.blob();
    // Return the full data URL, which includes the correct MIME type.
    return await blobToBase64(blob) as string;
}

/**
 * Generates an avatar using the multi-modal 'responses' API.
 * This is the core, non-streaming avatar generation logic for production.
 *
 * @param faceUrl - The public URL of the user's face image.
 * @param styleId - The ID of the chosen style (e.g., "m1", "f4").
 * @returns A promise that resolves to the URL of the generated and uploaded avatar.
 */
export async function generateAvatar(faceUrl: string, styleId: string): Promise<string> {
    const MOCK_AVATAR_GEN = process.env.MOCK_AVATAR_GEN === 'true';

    if (MOCK_AVATAR_GEN) {
        console.log("--- MOCKING AVATAR GENERATION (SERVICE) ---");
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate delay

        const isFemale = styleId.startsWith('f');
        const stylesArray = isFemale ? femaleStyles : maleStyles;
        const randomIndex = Math.floor(Math.random() * stylesArray.length);
        
        console.log(`Mocking with style: ${stylesArray[randomIndex].alt}`);
        return stylesArray[randomIndex].src;
    }

    console.log(`Starting avatar generation for style ID: ${styleId} using 'images.generate' API.`);

    try {
        const { prompt: instructions, archetype } = getPromptForStyle(styleId);
        const style = [...maleStyles, ...femaleStyles].find(s => s.id === styleId);
        if (!style) throw new Error(`Could not find style for ID ${styleId}`);
        
        console.log(`Using archetype "${archetype}" with instructions and passing image URLs directly.`);

        // The API expects direct URLs, not base64 data, so we pass them straight through.
        
        // Per user direction, using the confirmed-working structure from avatar-gen.ts
        // with the correct response extraction method.
        const response = await ai.images.generate({
            model: 'dall-e-3',
            prompt: instructions,
            n: 1,
            size: "1024x1024",
            response_format: 'b64_json',
        });
        
        // Correctly extract the result from the 'output' array for non-streaming responses.
        const imageB64 = response.data?.[0]?.b64_json;

        if (!imageB64) {
            console.error("OpenAI 'images.generate' API call did not return an image. Full response:", JSON.stringify(response, null, 2));
            throw new Error("OpenAI 'images.generate' API did not return image data.");
        }
        console.log('✅ Avatar generated by `images.generate` API successfully.');

        const finalAvatarUrl = await uploadFromUrlToTmp(`data:image/png;base64,${imageB64}`, 'png');
        console.log(`✅ Avatar uploaded to: ${finalAvatarUrl}`);

        return finalAvatarUrl;

    } catch (error) {
        console.error("❌ Error in generateAvatar service:", error);
        throw new Error(`Could not generate avatar: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
} 