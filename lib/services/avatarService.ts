import { OpenAI } from 'openai';
import { getPromptForStyle } from './promptService';
import { blobToBase64 } from '@/lib/base64';
import { uploadFromUrlToTmp } from '@/lib/uploadFromUrlToTmp';
import { maleStyles, femaleStyles } from '@/lib/avatarStyles';

const ai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
const LIMITLESS_CREST_URL = "https://pub-0539ca942f4a457a83573a5585904cba.r2.dev/styleref_limitless.png";

async function imageToDataUrl(url: string): Promise<string> {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch image from URL: ${url}`);
    }
    const blob = await response.blob();
    // Return the full data URL, which includes the correct MIME type.
    return await blobToBase64(blob) as string;
}

/**
 * Generates an avatar using the multi-modal 'responses' API.
 * This is the core, non-streaming avatar generation logic for production.
 *
 * @param faceUrl - The public URL of the user's face image.
 * @param styleId - The ID of the chosen style (e.g., "m1", "f4").
 * @returns A promise that resolves to the URL of the generated and uploaded avatar.
 */
export async function generateAvatar(faceUrl: string, styleId: string): Promise<string> {
    const MOCK_AVATAR_GEN = process.env.MOCK_AVATAR_GEN === 'true';
    if (MOCK_AVATAR_GEN) {
        console.log('--- MOCKING AVATAR GENERATION ---');
        const style = [...maleStyles, ...femaleStyles].find(s => s.id === styleId);
        if (!style) {
            throw new Error(`[MOCK] Could not find style for ID ${styleId}`);
        }
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay
        console.log(`Mocking: Returning style image URL: ${style.src}`);
        return style.src;
    }

    console.log(`Starting avatar generation for style ID: ${styleId} using 'responses' API.`);

    try {
        const { prompt: instructions, archetype } = getPromptForStyle(styleId);
        const style = [...maleStyles, ...femaleStyles].find(s => s.id === styleId);
        if (!style) throw new Error(`Could not find style for ID ${styleId}`);
        
        console.log(`Using archetype "${archetype}" with instructions.`);
        
        // --- DIAGNOSTIC LOGGING ---
        console.log('[AvatarGen] URLs being sent to OpenAI:');
        console.log(`  - User Face URL: ${faceUrl}`);
        console.log(`  - Style Ref URL: ${style.src}`);
        console.log(`  - Crest URL:     ${LIMITLESS_CREST_URL}`);
        console.log('[AvatarGen] Sending request to OpenAI...');
        // --- END DIAGNOSTIC LOGGING ---

        // The API expects direct URLs, not base64 data, so we pass them straight through.
        
        // Per user direction, using the confirmed-working structure from avatar-gen.ts
        // with the correct response extraction method.
        const response = await ai.responses.create({
            model: 'gpt-4.1',
            input: [
                {
                    role: 'user',
                    content: [
                        { type: 'input_text', text: instructions },
                        { type: 'input_text', text: 'USER_SELFIE' },
                        { type: 'input_image', image_url: faceUrl, detail: 'low' },
                        { type: 'input_text', text: 'STYLE_REFERENCE' },
                        { type: 'input_image', image_url: style.src, detail: 'low' },
                        { type: 'input_text', text: 'LIMITLESS_CREST' },
                        { type: 'input_image', image_url: LIMITLESS_CREST_URL, detail: 'low' }
                    ],
                },
            ],
            tool_choice: 'required',
            tools: [{ 
                type: "image_generation",
                moderation: "low",
                size: "1024x1024",
            }],
        });
        
        console.log('[AvatarGen] Received response from OpenAI.');

        // Correctly extract the result from the 'output' array for non-streaming responses.
        const imagesB64 = (response as any).output
            ?.filter((output: any) => output.type === "image_generation_call")
            ?.map((output: any) => output.result);

        if (!imagesB64 || !Array.isArray(imagesB64) || imagesB64.length === 0 || !imagesB64[0]) {
            console.error("OpenAI 'responses' API call did not return an image. Full response:", JSON.stringify(response, null, 2));
            throw new Error("OpenAI 'responses' API did not return image data.");
        }
        console.log(`✅ Avatar generated by 'responses' API successfully.`);

        // Since we expect only one image, take the first one.
        const imageB64 = imagesB64[0];

        // Upload the single image and return its URL
        const avatarUrl = await uploadFromUrlToTmp(`data:image/png;base64,${imageB64}`, 'png');
        console.log(`✅ Avatar uploaded to: ${avatarUrl}`);

        return avatarUrl;

    } catch (error) {
        console.error("❌ Error in generateAvatar service:", error);
        throw new Error(`Could not generate avatar: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
} 