generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "node-api"
}

datasource db {
  provider = "postgreoessql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   USER PROFILE
/// ─────────────────────────────────────────────────────────────────────────────
model Profile {
  id             String    @id @unique
  email          String    @unique
  nickname       String?   @unique
  citizenId      Int?      @unique // Sequential citizenship number – assigned at activation
  warnings       Int         @default(0)
  banned         Boolean     @default(false)
  avatarUrl      String?
  status         String    @default("PENDING") // Possible values: PENDING, FACE_SCANNED, SUBSCRIBED, GENERATING_ASSETS, AVATAR_GENERATED, ACTIVE, ACTIVATION_FAILED
  rekFaceId      String?   @unique
  stripeCustomerId String?   @unique
  stripeSubscriptionId String?   @unique
  stripeInvoiceId      String?   @unique
  stripePaymentIntentId String?   @unique
  stripePriceId      String?
  stripeCurrentPeriodEnd DateTime?
  tmpFaceUrl     String?
  styleId        String?
  styleUrl       String?
  gender         String?
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  lastModifiedAt DateTime  @updatedAt
  comments       Comment[]
  modLogs        ModLog[]
  topicLikes     TopicLike[]
  banReason      String?
  bannedAt       DateTime?
  deletedAt      DateTime?
  deletionReason String?
  registrationStatus  RegistrationStatus @default(REGISTER_START)
  regRetryCount       Int                @default(0)
  regMeta             Json?

  // Commenting out relations to undefined models for now
  // sentMessages     Message[] @relation("SentMessages")
  // receivedMessages Message[] @relation("ReceivedMessages")
  // history          UserHistory[]
  // bans             Ban[]

  @@index([email])
  @@index([nickname])
  @@index([status])
  @@index([citizenId])
  @@index([registrationStatus])
  @@map("profiles")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   CITY ASSETS
/// ─────────────────────────────────────────────────────────────────────────────
model Asset {
  id                String    @id @default(uuid())
  name              String    @unique
  description       String?
  logoUrl           String
  websiteUrl        String?
  totalInvestment   Float     @default(0)
  tokenCount        Float     @default(0)
  order             Int       @default(0)  // For display order
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  lastModifiedAt    DateTime  @updatedAt

  @@index([isActive])
  @@index([order])
  @@map("assets")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   TOPICS
/// ─────────────────────────────────────────────────────────────────────────────
model Topic {
  id         String      @id
  title      String
  body       String
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  videoUrl   String
  imageUrl   String?
  comments   Comment[]
  topicLikes TopicLike[]

  @@map("topics")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   COMMENTS  (threaded via parentId ⇄ replies)
/// ─────────────────────────────────────────────────────────────────────────────
model Comment {
  id        String    @id
  body      String
  authorId  String?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  parentId  String?
  topicId   String
  author    Profile?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  modLogs   ModLog[]

  @@index([topicId, createdAt(sort: Desc)])
  @@map("comments")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   TOPIC LIKES  (composite-PK: one like per user per topic)
/// ─────────────────────────────────────────────────────────────────────────────
model TopicLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  topicId   String
  userId    String?
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      Profile?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([userId, topicId])
  @@index([topicId])
  @@map("topic_likes")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   MODERATION LOGS  (every warning / ban event)
/// ─────────────────────────────────────────────────────────────────────────────
model ModLog {
  id        Int      @id @default(autoincrement())
  score     String
  commentId String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String?
  action    Int      @default(0)
  comment   Comment? @relation(fields: [commentId], references: [id])
  user      Profile?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@map("mod_logs")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   GLOBAL COUNTERS (single-row per counter name)
/// ─────────────────────────────────────────────────────────────────────────────
model Counter {
  name  String @id
  value Int

  @@map("counters")
}

enum RegistrationStatus {
  REGISTER_START
  EMAIL_SENT
  EMAIL_VERIFIED
  STRIPE_CUSTOMER_CREATED
  PAYMENT_METHOD_ATTACHED
  SUBSCRIPTION_CREATED
  PAYMENT_SUCCEEDED
  AVATAR_JOB_ENQUEUED
  AVATAR_READY
  PROFILE_COMPLETED
  ACTIVE
  ROLLBACK_PENDING
  CLAIMS_REVOKED
  FIRESTORE_CLEANED
  STRIPE_REFUNDED
  ROLLBACK_DONE
}
