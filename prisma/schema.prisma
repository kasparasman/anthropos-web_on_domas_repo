generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   USER PROFILE
/// ─────────────────────────────────────────────────────────────────────────────
model Profile {
  id         String      @id @default(uuid())
  email      String      @unique
  nickname   String      @unique
  warnings   Int         @default(0)
  banned     Boolean     @default(false)
  avatarUrl  String?
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  rekFaceId  String?
  comments   Comment[]
  modLogs    ModLog[]
  topicLikes TopicLike[]

  @@map("profiles")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   TOPICS
/// ─────────────────────────────────────────────────────────────────────────────
model Topic {
  id         String      @id
  title      String
  body       String
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  videoUrl   String
  comments   Comment[]
  topicLikes TopicLike[]

  @@map("topics")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   COMMENTS  (threaded via parentId ⇄ replies)
/// ─────────────────────────────────────────────────────────────────────────────
model Comment {
  id        String    @id
  body      String
  authorId  String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  parentId  String?
  topicId   String
  author    Profile   @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  modLogs   ModLog[]

  @@index([topicId, createdAt(sort: Desc)])
  @@map("comments")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   TOPIC LIKES  (composite-PK: one like per user per topic)
/// ─────────────────────────────────────────────────────────────────────────────
model TopicLike {
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  topicId   String
  userId    String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
  @@index([topicId])
  @@map("topic_likes")
}

/// ─────────────────────────────────────────────────────────────────────────────
///   MODERATION LOGS  (every warning / ban event)
/// ─────────────────────────────────────────────────────────────────────────────
model ModLog {
  id        Int      @id @default(autoincrement())
  score     String
  commentId String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String
  action    Int      @default(0)
  comment   Comment? @relation(fields: [commentId], references: [id])
  user      Profile  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("mod_logs")
}
